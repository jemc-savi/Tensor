:class Tensor.Op.SplitV.Spec
  :is Spec
  :const describes: "Tensor.Op.SplitV"

  :it "splits a tensor into varying sized slices along the given axis"
    _WithGraphHelper.run(@env) -> (g, session | assert no_error: (
      op = g.split_varying!("example"
        g.const!("input"
          Tensor(F64).from_array([
            10, 11, 12, 13, 14
            15, 16, 17, 18, 19
            20, 21, 22, 23, 24
            25, 26, 27, 28, 29

            30, 31, 32, 33, 34
            35, 36, 37, 38, 39
            40, 41, 42, 43, 44
            45, 46, 47, 48, 49

            50, 51, 52, 53, 54
            55, 56, 57, 58, 59
            60, 61, 62, 63, 64
            65, 66, 67, 68, 69
          ]).try_reshape([3, 4, 5])
        )
        2
        [1, -1, 2]
      )

      slice_0 = session.compute!(op.output_slice(0))
      assert: slice_0.shape_into_array == [3, 4, 1]
      assert: slice_0.as!(Tensor(F64)).into_array == [
        10
        15
        20
        25

        30
        35
        40
        45

        50
        55
        60
        65
      ]

      slice_1 = session.compute!(op.output_slice(1))
      assert: slice_1.shape_into_array == [3, 4, 2]
      assert: slice_1.as!(Tensor(F64)).into_array == [
        11, 12
        16, 17
        21, 22
        26, 27
        31, 32
        36, 37
        41, 42
        46, 47
        51, 52
        56, 57
        61, 62
        66, 67
      ]

      slice_2 = session.compute!(op.output_slice(2))
      assert: slice_2.shape_into_array == [3, 4, 2]
      assert: slice_2.as!(Tensor(F64)).into_array == [
        13, 14
        18, 19
        23, 24
        28, 29

        33, 34
        38, 39
        43, 44
        48, 49

        53, 54
        58, 59
        63, 64
        68, 69
      ]
    ))

  :it "complains if the axis parameter is out of bounds"
    _WithGraphHelper.run(@env, False) -> (g, session |
      assert error: g.split_varying!("example"
        g.const!("input"
          Tensor(F64).from_array([
            10, 11, 12, 13, 14
            15, 16, 17, 18, 19
            20, 21, 22, 23, 24
            25, 26, 27, 28, 29

            30, 31, 32, 33, 34
            35, 36, 37, 38, 39
            40, 41, 42, 43, 44
            45, 46, 47, 48, 49

            50, 51, 52, 53, 54
            55, 56, 57, 58, 59
            60, 61, 62, 63, 64
            65, 66, 67, 68, 69
          ]).try_reshape([3, 4, 5])
        )
        3 // out of bounds
        [-1]
      )
    )

  :it "complains if the sum of slice sizes is too small"
    _WithGraphHelper.run(@env, False) -> (g, session |
      assert error: g.split_varying!("example"
        g.const!("input"
          Tensor(F64).from_array([
            10, 11, 12, 13, 14
            15, 16, 17, 18, 19
            20, 21, 22, 23, 24
            25, 26, 27, 28, 29

            30, 31, 32, 33, 34
            35, 36, 37, 38, 39
            40, 41, 42, 43, 44
            45, 46, 47, 48, 49

            50, 51, 52, 53, 54
            55, 56, 57, 58, 59
            60, 61, 62, 63, 64
            65, 66, 67, 68, 69
          ]).try_reshape([3, 4, 5])
        )
        2
        [1, 2, 1] // sum is 4 but sum of 5 is expected
      )
    )

  :it "complains if the sum of slice sizes is too large"
    _WithGraphHelper.run(@env, False) -> (g, session |
      assert error: g.split_varying!("example"
        g.const!("input"
          Tensor(F64).from_array([
            10, 11, 12, 13, 14
            15, 16, 17, 18, 19
            20, 21, 22, 23, 24
            25, 26, 27, 28, 29

            30, 31, 32, 33, 34
            35, 36, 37, 38, 39
            40, 41, 42, 43, 44
            45, 46, 47, 48, 49

            50, 51, 52, 53, 54
            55, 56, 57, 58, 59
            60, 61, 62, 63, 64
            65, 66, 67, 68, 69
          ]).try_reshape([3, 4, 5])
        )
        2
        [2, 2, 2] // sum is 6 but sum of 5 is expected
      )
    )