:class Tensor.Comp.TensorDot.Outer.Spec
  :is Spec
  :const describes: "Tensor.Comp.TensorDot.Outer"

  :it "is equivalent to matrix multiplication for rank-2 tensors"
    _WithGraphHelper.run(@env) -> (g, session | assert no_error: (
      result = session.compute!(
        g.tensordot_outer!("example"
          g.const!("A", Tensor(F64).from_array([
            1.0, 2.0
            3.0, 4.0
          ]).try_reshape([2, 2]))
          g.const!("B", Tensor(F64).from_array([
            5.0, 6.0
            7.0, 8.0
          ]).try_reshape([2, 2]))
        )
      )

      assert: result.as!(Tensor(F64)).into_array == [
        1.0 * 5.0 + 2.0 * 7.0, 1.0 * 6.0 + 2.0 * 8.0 // Arow1⋅Bcol1, Arow1⋅Bcol2
        3.0 * 5.0 + 4.0 * 7.0, 3.0 * 6.0 + 4.0 * 8.0 // Arow2⋅Bcol1, Arow2⋅Bcol2
      ]
    ))

  :it "handles larger-rank tensors by applying to the outer axes"
    _WithGraphHelper.run(@env) -> (g, session | assert no_error: (
      result = session.compute!(
        g.tensordot_outer!("example"
          g.const!("A", Tensor(F64).from_array([
            1,  2,  3
            4,  5,  6

            7,  8,  9
            10, 11, 12
          ]).try_reshape([2, 2, 3]))
          g.const!("B", Tensor(F64).from_array([
            13, 14
            15, 16

            17, 18
            19, 20

            21, 22
            23, 24
          ]).try_reshape([3, 2, 2]))
        )
      )

      assert: result.shape_into_array == [2, 2, 2, 2]
      assert: result.as!(Tensor(F64)).into_array == [
        1.0 * 13.0 + 2.0 * 17.0 + 3.0 * 21.0, 1.0 * 14.0 + 2.0 * 18.0 + 3.0 * 22.0 // A00_ ⋅ B_00, A00_ ⋅ B_01
        1.0 * 15.0 + 2.0 * 19.0 + 3.0 * 23.0, 1.0 * 16.0 + 2.0 * 20.0 + 3.0 * 24.0 // A00_ ⋅ B_10, A00_ ⋅ B_11

        4.0 * 13.0 + 5.0 * 17.0 + 6.0 * 21.0, 4.0 * 14.0 + 5.0 * 18.0 + 6.0 * 22.0 // A01_ ⋅ B_00, A01_ ⋅ B_01
        4.0 * 15.0 + 5.0 * 19.0 + 6.0 * 23.0, 4.0 * 16.0 + 5.0 * 20.0 + 6.0 * 24.0 // A01_ ⋅ B_10, A01_ ⋅ B_11

        //

        7.0 * 13.0 + 8.0 * 17.0 + 9.0 * 21.0, 7.0 * 14.0 + 8.0 * 18.0 + 9.0 * 22.0 // A10_ ⋅ B_00, A10_ ⋅ B_01
        7.0 * 15.0 + 8.0 * 19.0 + 9.0 * 23.0, 7.0 * 16.0 + 8.0 * 20.0 + 9.0 * 24.0 // A10_ ⋅ B_10, A10_ ⋅ B_11

        10.0 * 13.0 + 11.0 * 17.0 + 12.0 * 21.0, 10.0 * 14.0 + 11.0 * 18.0 + 12.0 * 22.0 // A11_ ⋅ B_00, A11_ ⋅ B_01
        10.0 * 15.0 + 11.0 * 19.0 + 12.0 * 23.0, 10.0 * 16.0 + 11.0 * 20.0 + 12.0 * 24.0 // A11_ ⋅ B_10, A11_ ⋅ B_11
      ]
    ))
