:trait Tensor.Any
  :let _ptr CPointer(_FFI.Tensor)
  :let _ptr_is_owned Bool

  :fun shape_into_array(shape Array(USize) = []) Array(USize)
  :fun element_count USize
  :fun element_byte_width U8
  :fun non element_type_code I32: -1

:class Tensor(T Numeric(T)'val) // TODO: Exclude non-machine word implementers of the Numeric trait
  :is Tensor.Any

  :fun non _ffi: _FFI.Tensor
  :let _ptr CPointer(_FFI.Tensor)
  :let _ptr_is_owned Bool

  :new _new(@_ptr, @_ptr_is_owned)

  // TODO: Finalizer, taking `_ptr_is_owned` into account

  // :new (dimensions Array(U64))
  //   total_element_count USize = 1
  //   dimensions.each -> (dimension_size |
  //     total_element_count = total_element_count * dimension_size.usize
  //   )
  //   @_ptr_is_owned = True
  //   @_ptr = _FFI.Tensor._allocate(
  //     _FFI.DataType(T)._code
  //     dimensions.cpointer
  //     dimensions.size.i32
  //     T.byte_width.usize * total_element_count
  //   )

  :new scalar(value T)
    @_ptr_is_owned = True
    @_ptr = @_ffi.allocate(
      _FFI.DataType(T).code
      CPointer(U64).null
      0
      T.byte_width.usize
    )

    _FFI.memcpy(
      _FFI.Tensor.data(@_ptr)
      _FFI.Cast(CPointer(T), CPointer(U8)).pointer(
        stack_address_of_variable value
      )
      T.byte_width.usize
    )

  :new from_array(data Array(T)'box)
    data_count_u64 = data.size.u64
    total_byte_size = T.byte_width.usize * data.size

    @_ptr_is_owned = True
    @_ptr = @_ffi.allocate(
      _FFI.DataType(T).code
      stack_address_of_variable data_count_u64
      1
      total_byte_size
    )

    _FFI.memcpy(
      _FFI.Tensor.data(@_ptr)
      _FFI.Cast(CPointer(T), CPointer(U8)).pointer(data.cpointer)
      total_byte_size
    )

  :fun non generate(total_element_count USize)
    :yields USize for T
    // TODO: Do this without the intermediate array?
    elements Array(T) = []
    total_element_count.times -> (index |
      elements << (yield index)
    )
    @from_array(elements)

  :fun ref try_reshape(shape): try (@reshape!(shape) | @)
  :fun ref reshape!(shape Tensor.Shape'box)
    error! if shape.is_unknown
    error! if shape.is_unresolved

    element_count USize = 1
    shape.each -> (dimension |
      element_count = element_count * dimension.usize
    )
    error! unless element_count == @element_count

    @_ffi.set_shape(
      @_ptr
      try (shape._array.not!(None).cpointer | CPointer(I64).null)
      shape.rank
    )
    @

  :fun into_array(data Array(T) = [])
    orig_size = data.size

    size = @element_count.usize
    data.reserve(orig_size + size)
    while data.size < size (
      data << T.zero
    )
    // TODO: make the above process more efficient - use the
    // `resize_possibly_including_uninitialized_memory` method on `Bytes`
    // for inspiration, but generalize to `Array`.

    _FFI.memcpy(
      _FFI.Cast(CPointer(T), CPointer(U8)).pointer(data.cpointer)
      @_ffi.data(@_ptr)
      T.byte_width.usize * size
    )
    data

  :fun shape_into_array(shape Array(USize) = []) Array(USize)
    num_dims = @_ffi.num_dims(@_ptr).usize
    shape.reserve(shape.size + num_dims)
    num_dims.times -> (index | shape << @_ffi.dim_at(@_ptr, index.i32).usize)
    shape

  :fun element_count
    count = _FFI.Tensor.element_count(@_ptr).usize
    if count.is_zero (USize.one | count)

  :fun element_byte_width: T.byte_width
  :fun non element_type_code I32: _FFI.DataType(T).code // TODO: avoid I32 here?

:module _FFI.Tensor
  :fun non _adopt_ownership_of(ptr CPointer(@)) Tensor.Any
    _FFI.DataType.Util._tensor_with_type(@type(ptr), ptr, True)

  :ffi allocate(
    data_type I32
    dimension_list CPointer(U64)
    dimension_count I32
    len USize
  ) CPointer(@)
    :foreign_name TF_AllocateTensor

  :ffi free(ptr CPointer(@)) None
    :foreign_name TF_DeleteTensor

  :ffi type(tensor CPointer(@)) I32
    :foreign_name TF_TensorType

  :ffi data(tensor CPointer(@)) CPointer(U8)
    :foreign_name TF_TensorData

  :ffi element_count(tensor CPointer(@)) U64
    :foreign_name TF_TensorElementCount

  :ffi num_dims(tensor CPointer(@)) I32
    :foreign_name TF_NumDims

  :ffi dim_at(tensor CPointer(@), index I32) I64
    :foreign_name TF_Dim

  :ffi set_shape(
    tensor CPointer(@)
    dimension_list CPointer(I64)
    dimension_count I32
  ) None
    :foreign_name TF_SetShape
