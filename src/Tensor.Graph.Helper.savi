:struct Tensor.Graph.Helper
  :let graph Tensor.Graph
  :new (@graph)
  :copies Tensor.Graph.Helper.Methods

:trait Tensor.Graph.Helper.Methods
  :fun graph @->(Tensor.Graph)

  ///
  // Value Sources

  :fun ref const!(name, value)
    Tensor.Op.Const.new!(@graph, name, value)

  :fun ref placeholder!(name, output_type, output_shape)
    Tensor.Op.Placeholder.new!(@graph, name, output_type, output_shape)

  :fun ref variable!(name, output_type, output_shape)
    Tensor.Op.Variable.new!(@graph, name, output_type, output_shape)

  ///
  // Variable Mutations

  :fun ref apply_gradient_descent!(name, gradient, var, learning_rate)
    Tensor.Op.Optimize.GradientDescent.new!(@graph, name, gradient, var, learning_rate)

  ///
  // Pseudo-Random Sources

  :fun ref gen_random!(name
    seed
    algorithm Tensor.Gen.Random.Algorithm = Tensor.Gen.Random.Algorithm.Philox
  )
    Tensor.Gen.Random.new!(@graph, name, seed, algorithm)

  :fun ref random_uniform!(name
    gen_random Tensor.Gen.Random
    output_type
    output_shape Array(USize)
  )
    output_shape_tensor = Tensor(I64).generate(output_shape.size) -> (i |
      output_shape[i]!.i64
    )
    Tensor.Op.Random.Uniform.new!(@graph, name
      gen_random.algorithm
      gen_random.key
      gen_random.use_counter!(output_shape_tensor.element_count.u64)
      output_type
      @const!("\(name).output_shape", output_shape_tensor)
    )

  :fun ref random_uniform_integers!(name
    gen_random Tensor.Gen.Random
    output_type
    output_shape Array(USize)
  )
    output_shape_tensor = Tensor(I64).generate(output_shape.size) -> (i |
      output_shape[i]!.i64
    )
    Tensor.Op.Random.Uniform.Integers.new!(@graph, name
      gen_random.algorithm
      gen_random.key
      gen_random.use_counter!(output_shape_tensor.element_count.u64)
      output_type
      @const!("\(name).output_shape", output_shape_tensor)
    )

  :fun ref random_uniform_bounded_integers!(name
    gen_random Tensor.Gen.Random
    output_type
    output_shape Array(USize)
    min_val Tensor.Any
    max_val Tensor.Any
  )
    output_shape_tensor = Tensor(I64).generate(output_shape.size) -> (i |
      output_shape[i]!.i64
    )
    Tensor.Op.Random.Uniform.BoundedIntegers.new!(@graph, name
      gen_random.algorithm
      gen_random.key
      gen_random.use_counter!(output_shape_tensor.element_count.u64)
      output_type
      @const!("\(name).output_shape", output_shape_tensor)
      @const!("\(name).min", min_val)
      @const!("\(name).max", max_val)
    )

  ///
  // Logical Operations

  :fun ref logical_not!(name, input)
    Tensor.Op.Logical.Not.new!(@graph, name, input)

  :fun ref logical_and!(name, x, y)
    Tensor.Op.Logical.And.new!(@graph, name, x, y)

  :fun ref logical_or!(name, x, y)
    Tensor.Op.Logical.Or.new!(@graph, name, x, y)

  ///
  // Arithmetic Unary Operations

  :fun ref square!(name, input)
    Tensor.Op.Square.new!(@graph, name, input)

  ///
  // Arithmetic Binary Operations

  :fun ref add!(name, x, y)
    Tensor.Op.Add.new!(@graph, name, x, y)

  :fun ref multiply!(name, x, y)
    Tensor.Op.Multiply.new!(@graph, name, x, y)

  ///
  // Comparative Operations

  :fun ref greater!(name, x, y)
    Tensor.Op.Greater.new!(@graph, name, x, y, False)

  :fun ref greater_or_equal!(name, x, y)
    Tensor.Op.Greater.new!(@graph, name, x, y, True)

  :fun ref lesser!(name, x, y)
    Tensor.Op.Lesser.new!(@graph, name, x, y, False)

  :fun ref lesser_or_equal!(name, x, y)
    Tensor.Op.Lesser.new!(@graph, name, x, y, True)

  ///
  // Type/Shape Conversions

  :fun ref bitcast!(name, input, output_type)
    Tensor.Op.Bitcast.new!(@graph, name, input, output_type)

  :fun ref cast!(name, input, output_type)
    Tensor.Op.Cast.new!(@graph, name, input, output_type, False)

  :fun ref cast_with_floating_point_truncation!(name, input, output_type)
    Tensor.Op.Cast.new!(@graph, name, input, output_type, True)

  :fun ref shape!(name, input)
    Tensor.Op.Shape.new!(@graph, name, input)

  :fun ref reshape!(name, input, output_shape Array(USize))
    Tensor.Op.Reshape.new!(@graph, name, input
      @const!("\(name).new_shape"
        Tensor(I64).generate(output_shape.size) -> (index |
          output_shape[index]!.i64
        )
      )
    )

  :fun ref reshape_dynamic!(name, input, output_shape)
    Tensor.Op.Reshape.new!(@graph, name, input, output_shape)

  ///
  // Fan-out/Fan-in Operations

  :fun ref pack!(name, inputs, axis USize = 0)
    Tensor.Op.Pack.new!(@graph, name, inputs, axis)

  :fun ref slice!(
    name
    input
    begin_indices Array(USize)
    output_shape Array(USize)
  )
    @slice_dynamic!(name, input
      @const!("\(name).begin_indices"
        Tensor(I64).generate(begin_indices.size) -> (i | begin_indices[i]!.i64)
      )
      @const!("\(name).output_shape"
        Tensor(I64).generate(output_shape.size) -> (i | output_shape[i]!.i64)
      )
    )

  :fun ref slice_dynamic!(name, input, begin_indices, output_shape)
    Tensor.Op.Slice.new!(@graph, name, input, begin_indices, output_shape)

  :fun ref split_varying!(name, input, axis USize, split_sizes Array(USize))
    Tensor.Op.SplitV.new!(@graph, name, input
      @const!("\(name).axis"
        Tensor(I32).scalar(axis.i32)
      )
      @const!("\(name).split_sizes"
        Tensor(I64).generate(split_sizes.size) -> (i | split_sizes[i]!.i64)
      )
      split_sizes.size
    )

  :fun ref split_varying_dynamic!(name, input, axis, split_sizes, split_sizes_count)
    Tensor.Op.SplitV.new!(@graph, name, input, axis, split_sizes, split_sizes_count)

  ///
  // Other Unary Operations

  :fun ref softmax!(name, input)
    Tensor.Op.Softmax.new!(@graph, name, input)

  ///
  // Other Binary Operations

  :fun ref matmul!(name, a, b)
    Tensor.Op.MatMul.new!(@graph, name, a, b, False, False)

  :fun ref matmul_with_a_transposed!(name, a, b)
    Tensor.Op.MatMul.new!(@graph, name, a, b, True, False)

  :fun ref matmul_with_b_transposed!(name, a, b)
    Tensor.Op.MatMul.new!(@graph, name, a, b, False, True)

  :fun ref matmul_with_both_transposed!(name, a, b)
    Tensor.Op.MatMul.new!(@graph, name, a, b, True, True)

  ///
  // Other Ternary Operations

  :fun ref select!(name, condition, true_case, false_case)
    Tensor.Op.Select.new!(@graph, name, condition, true_case, false_case)
