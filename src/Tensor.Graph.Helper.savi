:struct Tensor.Graph.Helper
  :let graph Tensor.Graph
  :new (@graph)
  :copies Tensor.Graph.Helper.Methods

:trait Tensor.Graph.Helper.Methods
  :fun graph @->(Tensor.Graph)

  ///
  // Value Sources

  :fun ref const!(name, value)
    Tensor.Op.Const.new!(@graph, name, value)

  ///
  // Logical Operations

  :fun ref logical_not!(name, input)
    Tensor.Op.Logical.Not.new!(@graph, name, input)

  :fun ref logical_and!(name, x, y)
    Tensor.Op.Logical.And.new!(@graph, name, x, y)

  :fun ref logical_or!(name, x, y)
    Tensor.Op.Logical.Or.new!(@graph, name, x, y)

  ///
  // Comparative Operations

  :fun ref greater!(name, x, y)
    Tensor.Op.Greater.new!(@graph, name, x, y, False)

  :fun ref greater_or_equal!(name, x, y)
    Tensor.Op.Greater.new!(@graph, name, x, y, True)

  :fun ref lesser!(name, x, y)
    Tensor.Op.Lesser.new!(@graph, name, x, y, False)

  :fun ref lesser_or_equal!(name, x, y)
    Tensor.Op.Lesser.new!(@graph, name, x, y, True)

  ///
  // Type/Shape Conversions

  :fun ref bitcast!(name, input, output_type)
    Tensor.Op.Bitcast.new!(@graph, name, input, output_type)

  :fun ref cast!(name, input, output_type)
    Tensor.Op.Cast.new!(@graph, name, input, output_type, False)

  :fun ref cast_with_floating_point_truncation!(name, input, output_type)
    Tensor.Op.Cast.new!(@graph, name, input, output_type, True)

  :fun ref pack!(name, inputs, axis USize = 0)
    Tensor.Op.Pack.new!(@graph, name, inputs, axis)

  :fun ref reshape!(name, input, output_shape Array(USize))
    Tensor.Op.Reshape.new!(@graph, name, input
      @const!("\(name).new_shape"
        Tensor(I64).generate(output_shape.size) -> (index |
          output_shape[index]!.i64!
        )
      )
    )

  ///
  // Other Unary Operations

  :fun ref softmax!(name, input)
    Tensor.Op.Softmax.new!(@graph, name, input)

  ///
  // Other Binary Operations

  :fun ref matmul!(name, a, b)
    Tensor.Op.MatMul.new!(@graph, name, a, b, False, False)

  :fun ref matmul_with_a_transposed!(name, a, b)
    Tensor.Op.MatMul.new!(@graph, name, a, b, True, False)

  :fun ref matmul_with_b_transposed!(name, a, b)
    Tensor.Op.MatMul.new!(@graph, name, a, b, False, True)

  :fun ref matmul_with_both_transposed!(name, a, b)
    Tensor.Op.MatMul.new!(@graph, name, a, b, True, True)

  ///
  // Other Ternary Operations

  :fun ref select!(name, condition, true_case, false_case)
    Tensor.Op.Select.new!(@graph, name, condition, true_case, false_case)
