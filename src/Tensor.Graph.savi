:class Tensor.Graph
  :fun non _ffi: _FFI.Graph
  :let _ptr CPointer(_FFI.Graph)
  :let _status_ptr CPointer(_FFI.Status)
  :let errors Array(Tensor.Graph.Error): []

  // TODO: Add finalizer to call TF_DeleteGraph and TF_DeleteStatus when done.

  :new
    @_ptr = @_ffi.new
    @_status_ptr = _FFI.Status.new

  :: Check if there is currently an error code in `_status_ptr`, and if so,
  :: store the error info in the `errors` list and raise a Savi error.
  :fun ref _check_status! None
    error_code = _FFI.Status.get_code(@_status_ptr)
    return if error_code.is_none

    error_message = _FFI.Status.get_message(@_status_ptr)
    @errors << Tensor.Graph.Error.new(error_code, error_message)
    error!

  :fun ref new_operation(
    op_type String
    oper_name String
  ) Tensor.Graph.Operation
    // Yielding the builder instead of returning it lets us guarantee that
    // the caller will call `finish` on the builder, which is critical
    // for preserving memory safety of the C API we are wrapping.
    :yields Tensor.Graph.Operation.Builder for Tensor.Graph.Operation

    builder = Tensor.Graph.Operation.Builder._new(@, op_type, oper_name)
    yield builder

  :fun ref add_gradients!(
    y_list Array(Tensor.Graph.CanOutput)'box
    x_list Array(Tensor.Graph.CanOutput)'box
  )
    y_ffis = Array(_FFI.Output).new(y_list.size)
    dy_ffis = Array(_FFI.Output).new(y_list.size)
    y_list.each -> (y |
      try (y_ffis << y.output._to_ffi!)
      dy_ffis << _FFI.Output._new_temporarily_null
    )

    x_ffis = Array(_FFI.Output).new(x_list.size)
    x_list.each -> (x | try (x_ffis << x.output._to_ffi!))

    @_ffi.add_gradients(
      @_ptr
      y_ffis.cpointer, y_ffis.size.i32
      x_ffis.cpointer, x_ffis.size.i32
      CPointer(_FFI.Output).null
      @_status_ptr
      dy_ffis.cpointer
    )

    dy_list = Array(Tensor.Graph.Output).new(dy_ffis.size)
    dy_ffis.each -> (dy_ffi |
      dy_list << Tensor.Graph.Output._from_ffi_in_graph(@, dy_ffi)
    )
    dy_list

:module _FFI.Graph
  :ffi new CPointer(@)
    :foreign_name TF_NewGraph

  :ffi add_gradients(
    ptr CPointer(@)
    y_list CPointer(_FFI.Output), y_count I32
    x_list CPointer(_FFI.Output), x_count I32
    dx CPointer(_FFI.Output)
    status CPointer(_FFI.Status)
    dy CPointer(_FFI.Output)
  ) None
    :foreign_name TF_AddGradients
